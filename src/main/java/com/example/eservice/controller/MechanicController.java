package com.example.eservice.controller;

import com.example.eservice.model.Mechanic;
import com.example.eservice.repository.MechanicRepository;
import com.example.eservice.service.MechanicService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/mechanics")
public class MechanicController {

    @Autowired
    private MechanicRepository repository;

    @Autowired
    private MechanicService mechanicService;

    @Operation(
            summary = "Retrieve all mechanics",
            description = "Fetches a list of all mechanics stored in the system."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved list of mechanics"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping
    public List<Mechanic> getAllMechanics() {
        return repository.findAll();
    }

    @Operation(
            summary = "Create a new mechanic",
            description = "Adds a new mechanic to the system. The request body should include all the required details of the mechanic."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Successfully created the mechanic"),
            @ApiResponse(responseCode = "400", description = "Invalid request data"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @PostMapping
    public Mechanic createMechanic(
            @Parameter(description = "Mechanic object to be created", required = true)
            @RequestBody Mechanic mechanic
    ) {
        return repository.save(mechanic);
    }

    @Operation(
            summary = "Delete a mechanic",
            description = "Deletes a mechanic from the system using its ID."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted the mechanic"),
            @ApiResponse(responseCode = "404", description = "Mechanic not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @DeleteMapping("/{id}")
    public void deleteMechanic(
            @Parameter(description = "ID of the mechanic to be deleted", required = true)
            @PathVariable Long id
    ) {
        repository.deleteById(id);
    }

    @Operation(
            summary = "Calculate monthly profit for a mechanic",
            description = "Calculates the total profit generated by a mechanic for the current month."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully calculated profit"),
            @ApiResponse(responseCode = "404", description = "Mechanic not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/{id}/profit")
    public double getMonthlyProfit(
            @Parameter(description = "ID of the mechanic whose profit is to be calculated", required = true)
            @PathVariable Long id
    ) {
        return mechanicService.calculateProfitForMechanic(id);
    }
}
